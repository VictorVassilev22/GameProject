using System.Collections;using System.Collections.Generic;using UnityEngine;public class Boss : MonoBehaviour {    private const float FLOAT_COMPARASION_EPSILON = 0.1f;    public List<Vector3> spotPositions;    public float speed;    public GameObject projectile;    public Rigidbody2D rb;    private Vector3 originalPosition;    private Vector3 currentSpotTargetPosition;    private bool shouldReturn = false;    private bool shouldGoToSpot = false;	void Start ()    {        GameObject[] gameObjects = GameObject.FindGameObjectsWithTag("Spot");        foreach (GameObject spot in gameObjects)        {            spotPositions.Add(spot.transform.position);        }        this.originalPosition = transform.position;			}    void Update()    {        if (this.shouldReturn)            ReturnToOrigin();        else if (this.shouldGoToSpot)            GoToSpot();        else
            StartCoroutine(StartBuffRoutine());    }    private IEnumerator StartBuffRoutine()    {        //When called makes the boss go to spot        int spotIndex = Random.Range(0, this.spotPositions.Count - 1); // Choose random spot        this.currentSpotTargetPosition = this.spotPositions[spotIndex];        this.shouldGoToSpot = true;        yield return new WaitForSecondsRealtime(10); // Boss goes for a buff once every 10 seconds    }    private void MoveToLocation(Vector3 location)    {        //Moves the boss object towards a location        Vector3 direction = (location - this.transform.position).normalized;        this.transform.position += direction * speed; //Some time measurement needs to be added (*deltaTime)    }    private void GoToSpot()    {        //Moves the boss towards a spot        MoveToLocation(this.currentSpotTargetPosition);        shouldReturn = (this.currentSpotTargetPosition - transform.position).magnitude < FLOAT_COMPARASION_EPSILON;        shouldGoToSpot = !shouldReturn;    }    private void ReturnToOrigin()    {        //Moves the boss towards its original position        MoveToLocation(this.originalPosition);        shouldReturn = (this.originalPosition - transform.position).magnitude > FLOAT_COMPARASION_EPSILON;    }}